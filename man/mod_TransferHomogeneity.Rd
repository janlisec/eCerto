% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transferHomogeneity.R
\name{mod_TransferHomogeneity}
\alias{mod_TransferHomogeneity}
\alias{m_TransferHomogeneityUI}
\alias{m_TransferHomogeneityServer}
\title{m_TransferHomogeneity}
\usage{
m_TransferHomogeneityUI(id)

m_TransferHomogeneityServer(id, homogData, matTab_col_code, matTab_analytes)
}
\arguments{
\item{id}{Name when called as a module in a shiny app.}

\item{homogData}{Homogeneity data, if present (reactive).}

\item{matTab_col_code}{Columns of materialtabelle to be transferred to (reactive).}

\item{matTab_analytes}{Available analytes of materialtabelle (reactive).}
}
\value{
A reactive and one-column dataframe, containing the data to be merged.
}
\description{
\code{m_TransferHomogeneity} will provide a module to transfer the Homogeneity
Data in the correct format to the 'materialtable'. After Certification data
(initiating the material table) and Homogeneity data has been uploaded, it shows
the possible columns of materialtable to transfer to.
}
\details{
not yet
}
\examples{
if (interactive()) {
shiny::shinyApp(
 ui = shiny::fluidPage(
   m_TransferHomogeneityUI(id = "test")
 ),
 server = function(input, output, session) {
   datreturn <- ecerto:::test_datreturn()
   m_TransferHomogeneityServer(
     id = "test",
     homogData = shiny::reactive({ecerto::getValue(datreturn,"h_vals")}),
     matTab_col_code = shiny::reactive({attr(ecerto::getValue(datreturn,"mater_table"), "col_code")}),
     matTab_analytes = shiny::reactive({as.character(ecerto::getValue(datreturn,"mater_table")[, "analyte"])})
   )
 }
)
}

}
