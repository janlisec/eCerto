% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xlsx_range_select.R
\name{xlsx_range_select}
\alias{xlsx_range_select}
\alias{xlsx_range_select_UI}
\alias{xlsx_range_select_Server}
\title{A module to preview and select a range from a XLSX File.}
\usage{
xlsx_range_select_UI(id)

xlsx_range_select_Server(
  id,
  current_file_input = NULL,
  sheet = NULL,
  excelformat = shiny::reactive({     "Certification" }),
  silent = FALSE
)
}
\arguments{
\item{id}{Module ID when called in a shiny app.}

\item{current_file_input}{Shiny fileInput referencing excel file(s).}

\item{sheet}{Number of the sheet to preview.}

\item{excelformat}{Selected sub format as reactive string.}

\item{silent}{Option to print or omit status messages.}
}
\value{
A reactiveValues list with \code{start_col}, \code{end_col}, \code{tab_flt}
}
\description{
\code{xlsx_range_select} will provide a preview for an excel data file and allow the user to specify a range by mouse click(s).
}
\details{
not yet
}
\examples{
if (interactive()) {
shiny::shinyApp(
 ui = shiny::fluidPage(
   shiny::fluidRow(
     shiny::column(
      3,
      shiny::fileInput(
       inputId = "x",
       label = "Modul parameter: x",
       accept = "xlsx",
       multiple =TRUE
     )),
     shiny::column(
       3,
       shiny::numericInput(
        inputId = "sheet", label = "Modul parameter: sheet", value = 1
       )
     ),
     shiny::column(
        3,
        shiny::selectInput(
         inputId = "excelformat",
         label = "Modul parameter: excelformat",
         choices = c("Certification","Homogeneity","Stability")
        )
     ),
     shiny::column(
       3,
       shiny::selectInput(
         inputId = "silent",
         label = "Modul parameter: silent", choices = c("TRUE","FALSE")
       )
     )
   ),
   shiny::hr(),
   xlsx_range_select_UI(id = "test")
 ),
 server = function(input, output, session) {
  out <- xlsx_range_select_Server(
    id = "test",
    x = reactive({input$x}),
    sheet = reactive({input$sheet}),
    excelformat = reactive({input$excelformat})
   )
  observeEvent(out$rng, { print(out$rng) })
 }
)
}

}
